<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- parent 父项目 -->
    <!-- 父项目的作用：做依赖管理，也就是说在父项目中指定了版本号，继承父项目的子项目就不需要写版本号 -->
    <!-- parent 几乎声明了所有的开发中常用的 ( 依赖的版本号 ) -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.6.6</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <!-- 项目信息 -->
    <groupId>com.example</groupId>
    <artifactId>9-lingjing-server</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>9-lingjing-server</name>
    <description>9-lingjing-server</description>


    <properties>
        <java.version>1.8</java.version>
    </properties>

    <!-- 项目的打包类型 -->
    <!-- pom jar war -->
    <!-- 默认是打包成jar包，如果不设置这个标签就是打成 jar -->
    <packaging>jar</packaging>

    <dependencies>

        <!-- spring-boot-starter-web web相关的starter -->
        <!-- 这里没写版本好，因为父项目中设置了版本号 -->
        <!-- start 就是场景启动器，这个场景需要使用的常规依赖都会自动引入 -->
        <!-- SpringBoot官网所有场景：https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- spring-boot-starter-test 测试相关的starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
        <!-- lombok -->
        <!-- 主要用于自动生成DTO,MODEL，bean对象等的 @Getter @Setter @ToString @EqualsAndHashCode @RequiredArgsConstructor -->
        <!-- Lombok 的 scope=provided，说明它只在编译阶段生效，不需要打入包中 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.16</version>
            <scope>provided</scope>
        </dependency>

        <!-- spring-boot-devtools 从新构建 -->
        <!--实现重新构建，快捷键：command + f9 则可以重新构建，不需要在重新run-->
        <!-- 要实现热更新还需要设置两个地方，具体见我的博客 -->
        <!-- 博客地址：https://juejin.cn/post/6929145638898794503 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>


        <!-- jdbc依赖 -->
        <!-- 该场景启动器的主要作用：具有 ( 事务，jdbc，数据源 ) -->
        <!-- 该场景启动器不包含：数据库驱动，因为SpringBoot并不知道我们使用什么数据库，所以需要安装数据库驱动，比如mysql驱动 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>

        <!-- mysql数据库驱动, 版本需要和你安装的mysql版本保持一致，即驱动版本和数据库版本要一致 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.21</version>
            <scope>runtime</scope>
        </dependency>

        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.1.3</version>
        </dependency>

        <!-- Swagger - springfox-boot-starter -->
        <!-- 自动生成 ( 接口文档 ) 及 ( 自测工具 ) -->
        <!-- Swagger2 3.0 只需要 ( springfox-boot-starter ) 就可以了 -->
        <!-- Swagger2 2.x 则需要 ( springfox-swagger2 ) 和 ( springfox-swagger-ui )-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-boot-starter</artifactId>
            <version>3.0.0</version>
        </dependency>

        <!-- spring-boot-starter-thymeleaf -->
        <!-- 主要用于显示resources/templates中的html，即返回一个html -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!-- JWT  -->
        <!-- JWT 是 json web token 的缩写-->
        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>3.15.0</version>
        </dependency>

    </dependencies>

    <!-- 编译 -->
    <build>
        <plugins>

            <!-- spring-boot-maven-plugin -->
            <!-- maven插件 -->
            <!-- 该插件和打包相关，可以在右侧插件栏中使用 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

        </plugins>
    </build>

</project>
